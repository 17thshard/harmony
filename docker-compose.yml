---
version: '3.4'
services:
  proxy:
    image: marvinroesch/harmony-proxy:latest
    build:
      context: .
    ports:
      - 80:80
    depends_on:
      - frontend
      - backend

  frontend:
    image: marvinroesch/harmony-frontend:latest
    build:
      context: frontend
      target: ${ENV:-dev}
    volumes:
      - ./frontend:/app
      - frontend_modules:/app/node_modules
    depends_on:
      - backend
    stdin_open: true
    tty: true

  backend:
    image: marvinroesch/harmony-backend:latest
    build:
      context: backend
      target: ${ENV:-dev}
    env_file:
      - ./backend/.env
    environment:
      - DB_URL=postgres://harmony:h4rm0ny@db/harmony
    volumes:
      - ./backend:/app
      - backend_modules:/app/node_modules
    depends_on:
      - db
    stdin_open: true
    tty: true

  bot:
    image: marvinroesch/harmony-bot:latest
    container_name: harmony-bot
    build:
      context: .
      dockerfile: Dockerfile-gradle
      target: bot
    env_file:
      - ./bot/.env
    environment:
      - BROKER_URLS=broker:29092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
    depends_on:
      - broker
      - schema-registry

  db-import:
    image: marvinroesch/harmony-db-import:latest
    container_name: harmony-db-import
    build:
      context: .
      dockerfile: Dockerfile-gradle
      target: db-import
    env_file:
      - ./db-import/.env
    environment:
      - DB_CONNECTION=jdbc:postgresql://db/harmony
      - DB_DRIVER=org.postgresql.Driver
      - DB_USER=harmony_imports
      - DB_PASSWORD=imp0rt5
      - BROKER_URLS=broker:29092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
    depends_on:
      - db
      - broker
      - schema-registry

  db:
    image: postgres:12
    container_name: harmony-db
    environment:
      - POSTGRES_PASSWORD=example
      - DB_IMPORT_USER=harmony_imports
      - DB_IMPORT_PASSWORD=imp0rt5
      - DB_DATA_USER=harmony
      - DB_DATA_PASSWORD=h4rm0ny
    ports:
      - "5432:5432"
    volumes:
      - ./database-init:/docker-entrypoint-initdb.d

  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.2
    hostname: zookeeper
    container_name: harmony-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:5.3.2
    hostname: broker
    container_name: harmony-broker
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:5.3.2
    hostname: schema-registry
    container_name: harmony-schema-registry
    depends_on:
      - zookeeper
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL: forward

  elasticsearch:
    image: marvinroesch/harmony-elasticsearch:latest
    container_name: harmony-search
    build:
      context: ./elastic-ingest
      dockerfile: Dockerfile-elasticsearch
    volumes:
      - esdata:/usr/share/elasticsearch/data
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9300:9300"
      - "9200:9200"

volumes:
  frontend_modules:
  backend_modules:
  esdata:
