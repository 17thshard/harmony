type Query {
  identity: User!

  servers: [Server!]!
  server(id: ID!): Server

  channel(id: ID!): Channel
  user(server: ID!, id: ID!): User
  role(server: ID!, id: ID!): Role

  messages(channel: ID!, after: Timestamp!, before: Timestamp!, limit: Int!): [Message!]!
  embeds(message: ID!): [Embed!]!
}

scalar Timestamp

type Server {
  id: ID!
  name: String!
  iconUrl: String
  channels: [Channel!]
}

type Channel {
  id: ID!
  server: ID!
  name: String!
  category: String!
  type: String!
  deletedAt: Timestamp
}

type User {
  id: ID!
  name: String!
  discriminator: String!
  nickname: String
  color: Color
}

type Role {
  id: ID!
  name: String!
  color: Color!
  deletedAt: Timestamp
}

type Color {
  r: Int!
  g: Int!
  b: Int!
}

type Message {
  id: ID!
  author: User!
  server: ID!
  versions: [MessageVersion!]!
  createdAt: Timestamp!
  editedAt: Timestamp
  deletedAt: Timestamp
}

type MessageVersion {
  content: String!
  timestamp: Timestamp!
}

type Embed {
  id: ID!
  type: String!
  title: String
  description: String
  url: String
  color: Color
  footer: EmbedFooter
  image: EmbedMedia
  thumbnail: EmbedMedia
  video: EmbedMedia
  provider: EmbedProvider
  author: EmbedAuthor
  fields: [EmbedField!]!
}

type EmbedFooter {
  text: String!
  iconUrl: String
  proxyIconUrl: String
}

type EmbedMedia {
  url: String
  proxyUrl: String
  width: Int
  height: Int
}

type EmbedProvider {
  name: String
  url: String
}

type EmbedAuthor {
  name: String
  url: String
  iconUrl: String
  proxyIconUrl: String
}

type EmbedField {
  name: String!
  value: String!
  inline: Boolean!
}
