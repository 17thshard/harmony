type Query {
  identity: Identity!

  servers: [Server!]!
  server(id: ID!): Server

  channel(id: ID!): Channel
  user(server: ID!, id: ID!): User
  role(server: ID!, id: ID!): Role

  messages(channel: ID!, paginationMode: PaginationMode!,  paginationReference: PaginationReference!, limit: Int!): [Message!]!
  messageDetails(message: ID!): MessageDetails
  reactors(message: ID!, type: String!, emoji: String!, emojiId: ID): [Reactor!]!

  userDetails(server: ID!, id: ID!): UserDetails

  search(server: ID!, parameters: SearchParameters!): SearchResult!
  searchSuggestions(server: ID!): SearchSuggestions!

  redirectMessage(id: ID!): RedirectMessage
}

input SearchParameters {
  query: String!
  sort: SortOrder
  afterMessage: ID
}

enum SortOrder {
  ASCENDING, DESCENDING
}

scalar Timestamp

type Identity {
  user: User!
  timezone: String!
}

type Server {
  id: ID!
  name: String!
  iconUrl: String
  channels: [Channel!]
}

type Channel {
  id: ID!
  server: ID!
  name: String!
  category: String!
  type: String!
  deletedAt: Timestamp
}

type User {
  id: ID!
  name: String!
  discriminator: String!
  bot: Boolean!
  nickname: String
  color: Color
}

type Role {
  id: ID!
  name: String!
  color: Color!
  deletedAt: Timestamp
}

type Color {
  r: Int!
  g: Int!
  b: Int!
}

enum PaginationMode {
  BEFORE, AROUND, AFTER
}

input PaginationReference {
  message: ID
  minTime: Timestamp
  maxTime: Timestamp
}

type Message {
  id: ID!
  author: User!
  server: ID!
  versions: [MessageVersion!]!
  createdAt: Timestamp!
  editedAt: Timestamp
  deletedAt: Timestamp
  hasReactions: Boolean!
  hasEmbeds: Boolean!
  hasAttachments: Boolean!
}

type MessageVersion {
  content: String!
  timestamp: Timestamp!
}

type MessageDetails {
  embeds: [Embed!]!
  attachments: [Attachment!]!
  reactions: [Reaction!]!
}

type Reaction {
  type: String!
  emoji: String!
  emojiId: String
  emojiAnimated: Boolean!
  count: Int
}

type Embed {
  id: ID!
  type: String!
  title: String
  description: String
  url: String
  color: Color
  timestamp: Timestamp
  footer: EmbedFooter
  images: [EmbedMedia]
  thumbnail: EmbedMedia
  video: EmbedMedia
  provider: EmbedProvider
  author: EmbedAuthor
  fields: [EmbedField!]!
}

type EmbedFooter {
  text: String!
  iconUrl: String
  proxyIconUrl: String
}

type EmbedMedia {
  url: String
  proxyUrl: String
  width: Int
  height: Int
}

type EmbedProvider {
  name: String
  url: String
}

type EmbedAuthor {
  name: String
  url: String
  iconUrl: String
  proxyIconUrl: String
}

type EmbedField {
  name: String!
  value: String!
  inline: Boolean!
}

type Attachment {
  type: String!
  name: String!
  url: String!
  proxyUrl: String!
  width: Int
  height: Int
  spoiler: Boolean!
}

type UserDetails {
  nicknames: [UserNickname!]!
  roles: [Role!]!
}

type UserNickname {
  name: String
  timestamp: Timestamp!
}

type Reactor {
  user: User!
  createdAt: Timestamp!
  deletedAt: Timestamp
}

type SearchResult {
  total: Int!
  entries: [SearchResultEntry]!
}

type SearchResultEntry {
  channel: Channel!,
  previous: Message
  message: Message!
  next: Message
}

type SearchSuggestions {
  users(query: String!): [User!]!
}

type RedirectMessage {
  server: ID!
  channel: ID!
  createdAt: ID!
}
